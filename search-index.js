var searchIndex = JSON.parse('{\
"evosim":{"doc":"","t":"AAAAAAAAOOOFAAAAAADDDLLLLLLLLLLMLLLLLLMLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLMLLLLLLLLLLLLMMLLLMMDDHHHHHHHHHHHHHHHHHHHHHHHHHHLLLLMLLLLLLFMMLLLLLMLMLMMLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLMMMLLMLMLLLLLLLMMLLLLLLLLLLMLLDDDDDDDMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLMMMMMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLDNEDDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFFMMLFLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLMFLMLLLLMMLFFLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLAAAANNDDRREDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLEDDNNMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDRLLLLLFFLLLLLLLLLLLLLLLLLLFLMFLLLLLLLLDDRRDDDDMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLMMMLLLMMMMMMMMMMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMMMMMMLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRARRRRRRRRRRRRAAAADLLLLLLFLLLLFLLLLFLLLLLLFLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFHDHDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLFLLLLLLLLLLAAADLLLLLLLLLLLLLLLLLLLLLLLLLLLHDDDHLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLFLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLFLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLHHHHHHFFFFFAAARFFFFFFFFFDLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLFFFFAAADLLLLLLLLLLLLLLLLLLLLLLLLLLLFFDLLLLLLLLLLLLLLLLLLLLLFLLLLLLLL","n":["blob","brain","componet","consts","contorl","graphics","io","logger","logger_error","logger_info","logger_warn","main","mutate","physics","blob","blob_builder","block","geno_blob_builder","Blob","BlobBundle","BlobInfo","add","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","blob_flag","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","center_block_pos","clone","clone_into","clone_type_data","color","component_ids","component_ids","computed_visibility","crowding_distance","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","fmt","from","from","from","from_components","from_components","from_sample_","from_sample_","from_sample_","from_subset","from_subset","from_subset","from_world","from_world","get_components","get_components","info","init","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","mass_center","move_distance","to_owned","to_sample_","to_sample_","to_sample_","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","transform_bundle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","velocity","visibility","vzip","vzip","vzip","xbound","ybound","BlobBlock","BlobBuilder","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","META","META","META","META","META","META","META","META","META","META","META","META","META","add_to_bottom","add_to_left","add_to_right","add_to_top","anchors","as_any","as_any","as_any_mut","as_any_mut","as_bind_group_shader_type","as_bind_group_shader_type","bind_joint","blob_bundle","blocks","borrow","borrow","borrow_mut","borrow_mut","bottom","bottom","clean","commands","create_first","current_pos","depth","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","fmt","from","from","from_commands","from_sample_","from_sample_","from_subset","from_subset","id","info","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","left","left","nn_id","nnvec","reset","right","right","set_color","size","to_sample_","to_sample_","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","top","top","translation","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","update_geno","update_info","vec_index","vzip","vzip","BlockAnchors","BlockDepth","CenterBlockFlag","JointInfo","NeuronId","ParentAnchor","PhysiBlockBundle","anchors","ang_pos","ang_velocity","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","collider","component_ids","component_ids","component_ids","component_ids","component_ids","component_ids","damping","default","default","depth","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","event_flag","ex_force","ex_impulse","fmt","fmt","fmt","fmt","friction","from","from","from","from","from","from","from","from_components","from_components","from_components","from_components","from_components","from_components","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_world","from_world","from_xy","from_xy_dx_dy","get_components","get_components","get_components","get_components","get_components","get_components","id","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","joint_info","left","massprop","neuron_id","new","parent_anchor","parent_id","restitution","rigbody","right","set_color","sprite","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","top","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_falg","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","update","velocity","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_blob","with_color","with_density","with_depth","with_nn_id","with_parent_anchor","BlobGeno","Child","GenericGenoNode","GenoBlobBuilder","GenoNode","Parent","QuadTree","_tree_edit_distance","all_nn_ids_indices","all_nn_ids_mut","all_usize_nn_ids","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","assign_nn_id_to_root","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch_nodes","build","build","build_node","build_node_with_nn","builder","center","change_node_size","check","child_direction","children","clean_subtree","clean_subtree_without_self","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_type_data","clone_type_data","clone_type_data","clone_type_data","collect_indices","component_ids","default","default","depth","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","erased_serialize","erased_serialize","erased_serialize","erased_serialize","fmt","fmt","fmt","fmt","from","from","from","from","from","from_commands","from_components","from_nn_id","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_subset","from_subset","from_subset","from_subset","from_subset","from_world","from_world","get_components","get_first","get_left_right_direction","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_leaf","is_overlapped","is_overlapped","is_valid","joint_limits","lambda","leaf_nodes","max_depth","move_subtree_nodes","move_subtree_nodes_root","new","new_rand","nn_id","nodes","parent","print_node","rand_nodes","serialize","serialize","serialize","serialize","size","subtree_indices","to_bundle","to_owned","to_owned","to_owned","to_owned","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","tree_edit_distance","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","vec_tree","vzip","vzip","vzip","vzip","vzip","neuron","nn","resource","signal","BLOCKNN","BRAINNN","BlockNN","BrainNN","CL","DL","GenericNN","InwardNN","OutwardNN","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","fmt","fmt","fmt","fmt","fmt","fmt","forward","from","from","from","from","from","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_subset","from_subset","from_subset","from_subset","from_subset","from_world","from_world","from_world","from_world","get_inward_output","get_outward_output","get_rand_brain_output","get_rand_inward_output","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","inward_forward","inward_nn","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","nn","nn","nn","outward_nn","outward_signal","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","Activation","BaseLayer","BaseNN","ReLU","Sigmoid","activation","apply","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","bias","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","clone_type_data","clone_type_data","clone_type_data","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","downcast","downcast","downcast","drop","drop","drop","erased_serialize","erased_serialize","erased_serialize","fmt","fmt","fmt","fmt","fmt","forward","forward","from","from","from","from_sample_","from_sample_","from_sample_","from_subset","from_subset","from_subset","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","layers","new_empty","new_empty","new_rand","new_rand","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_sample_","to_sample_","to_sample_","to_string","to_string","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","vzip","vzip","vzip","weights","BevyBlockNeurons","DL","as_any","as_any_mut","as_bind_group_shader_type","borrow","borrow_mut","brain_forward","brain_pass","clear","default","deref","deref_mut","downcast","drop","fmt","from","from_sample_","from_subset","from_world","get_outputs","get_rand_outputs","init","into","into_any","into_any_arc","into_any_rc","inward_bulk_pass","is_in_subset","nnvec","outward_bulk_pass","to_sample_","to_subset","to_subset_unchecked","try_from","try_into","type_id","upcast","vzip","BrainSignal","BrainSignalUnit","CL","DL","InwardNNInputSignal","InwardNNInputSignalUnit","OutwardNNInputSignal","SignalHandler","anchor_pos","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","blob_mass_center","blob_speed","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brain_len","brain_signal_vec","children_input","children_input","clone","clone_into","clone_type_data","collision_mag","collision_mag","collision_vect","collision_vect","collision_with_other_blob","collision_with_other_blob","collision_with_wall","collision_with_wall","cur_motor_pos","cur_motor_v","default","default","default","default","depth","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","entity_id","erased_serialize","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_world","from_world","from_world","from_world","get_sig_mut","get_signal_mut","get_signal_mut","inherit","inherited","init","init","init","init","init","init","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","inward_len","inward_signal_vec","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","joint_ang_pos","joint_ang_v","nn_id","nn_id","parent_input","parent_nn_id","push_brain","push_child_signal","push_child_signal","push_inward","serialize","signal","signal","to_array","to_array","to_array","to_owned","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","with_blob_info","with_cf_signal","with_cf_signal","with_joint_singal","BLOCK","BlobEntityIndex","ColliderFlag","WALL","as_any","as_any","as_any_mut","as_any_mut","as_bind_group_shader_type","as_bind_group_shader_type","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_type_data","clone_type_data","component_ids","component_ids","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","fmt","fmt","from","from","from_components","from_components","from_sample_","from_sample_","from_subset","from_subset","get_components","get_components","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","to_owned","to_owned","to_sample_","to_sample_","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","ACTIVATION_FUNCTION","AUTO_NO_VSYNC_KEYCODE","BLOB_SPAWN_POINT_RADIUS","BRAIN_NN_SHAPE","CHECKPOINTS_LENGTH","CLEAN_ALL_BLOBS_KEYCODE","DEFAULT_BLOCK_SIZE","DEFAULT_DAMPING_ANGULAR","DEFAULT_DAMPING_LINEAR","DEFAULT_DENSITY","DRAG_COEFF","ENABLE_CONTACTS","EPSILON","EXPORT_PATH","GENO_MAX_DEPTH","HYBRID_RATE","INWARD_NN_CHILDREN_INPUT_LEN","INWARD_NN_SHAPE","ITERATION_LENGTH","LOAD_ALL_BLOBS_FROM_JSON","LOAD_FNAME","LOAD_FOLDER","LOAD_NEWEST_FILE","LOG_PATH","MAX_MOTOR_POS_ABS","MAX_MOTOR_VEL_ABS","MIN_PRINT_DURATION","MOTOR_DAMPING","MOTOR_MAX_TARGET_V","MOTOR_STIFFNESS","MUTATE_AND_REFRESH_KEYCODE","NEW_ITERATION_KEYCODE","OUTWARD_NN_PARENT_INPUT_LEN","OUTWARD_NN_SHAPE","PANIC_TRY_TIMES","POPULATION","POSITION_EPSILON","PRINT_FUNCTION_TIME","RAND_NODE_NOT_NONE","RAND_SIZE_SCALER","RAPIER_DT","RAPIER_SUBSTEPS","SAVE_ALL_BLOBS_TO_JSON","SCATTER_RATIO_X","SCATTER_RATIO_Y","THREAD_COUNT","TRAINING_MODE","TRAIN_MOVE_SURVIVAL_RATE","WORLD_HEIGHT_SWIM","WORLD_HEIGHT_WALK","WORLD_WIDTH_SWIM","WORLD_WIDTH_WALK","mutate_consts","MUTATE_BLOCK_SIZE_PROB","MUTATE_GAIN_LIMB_MAX_TRY","MUTATE_GAIN_LIMB_PROB","MUTATE_JOINT_LIMIT_MAX","MUTATE_JOINT_LIMIT_MIN","MUTATE_JOINT_LIMIT_PROB","MUTATE_NN_PORB","MUTATE_NN_STD","MUTATE_SINGLE_BLOCK_SIZE_CLAMP_SCALER","MUTATE_SINGLE_BLOCK_SIZE_PROB","MUTATE_SINGLE_BLOCK_SIZE_SCALER","MUTATE_TREE_STRUCTURE_PROB","contorl","resource","train_move","update","BlobContorlPlugin","as_any","as_any_mut","as_bind_group_shader_type","borrow","borrow_mut","build","demo_setup","deref","deref_mut","downcast","drop","euclidean_distance","finish","from","from_sample_","from_subset","get_center","init","into","into_any","into_any_arc","into_any_rc","is_in_subset","move_setup","to_sample_","to_subset","to_subset_unchecked","try_from","try_into","type_id","upcast","vzip","Frames","TED","TrainMutPipe","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","from","from","from","from_sample_","from_sample_","from_sample_","from_subset","from_subset","from_subset","from_world","from_world","from_world","genovec","infovec","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_empty","is_in_subset","is_in_subset","is_in_subset","nnvec","pop","push","to_sample_","to_sample_","to_sample_","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","vzip","vzip","vzip","clean_outcast","hybrid_selection","iteration_end","log_train_move_swim","log_train_move_walk","reproduce","train_move_swim","train_move_walk","block_action","get_cf_event","get_cf_signal","get_mass_center","get_relative_angular_velocity","get_relative_rotation","update_blob_info","update_crowding_distance","update_iteration_frames","update_joint_info","CALLSITE","EvoGraphicsPlugin","META","MainCamera","as_any","as_any","as_any_mut","as_any_mut","as_bind_group_shader_type","as_bind_group_shader_type","borrow","borrow","borrow_mut","borrow_mut","build","component_ids","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","from","from","from_components","from_sample_","from_sample_","from_subset","from_subset","get_components","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","setup_graphics","to_sample_","to_sample_","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","toggle_vsync","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","evoio","export","import","EvoIOPlugin","as_any","as_any_mut","as_bind_group_shader_type","borrow","borrow_mut","build","deref","deref_mut","downcast","drop","from","from_sample_","from_subset","init","into","into_any","into_any_arc","into_any_rc","is_in_subset","to_sample_","to_subset","to_subset_unchecked","try_from","try_into","type_id","upcast","vzip","CALLSITE","ExportFile","ExportFileIter","ExportFileIterMut","META","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","create_if_not_exist","current_time_filename","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","downcast","downcast","downcast","drop","drop","drop","erased_serialize","export","flatten_nnvec","from","from","from","from_sample_","from_sample_","from_sample_","from_subset","from_subset","from_subset","geno_iter","geno_iter","genovec","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_iter","into_iter","is_checkpoints","is_in_subset","is_in_subset","is_in_subset","iter","iter_mut","len","multiunzip","multiunzip","new","next","next","nn_iter","nn_iter","nnvec","pos_iter","pos_iter","posvec","push_blob","push_nn","save","serialize","to_sample_","to_sample_","to_sample_","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","vzip","vzip","vzip","CALLSITE","CALLSITE","CALLSITE","META","META","META","clean","load_blobs","newest_file_name_in_directory","overwrite","log_to_file","geno_mutate","mutate","nn_mutate","CLAMP","gain_limb","get_movevec","lose_limb","mutate_block_size","mutate_geno","mutate_joint_limit","mutate_single_block_size","mutate_tree_structure","new_rand_node","MutatePlugin","as_any","as_any_mut","as_bind_group_shader_type","borrow","borrow_mut","build","deref","deref_mut","downcast","drop","from","from_sample_","from_subset","init","into","into_any","into_any_arc","into_any_rc","is_in_subset","mutate_and_refresh","mutate_and_refresh_after_train","sync_mutate","to_sample_","to_subset","to_subset_unchecked","try_from","try_into","type_id","upcast","vzip","mutate_base_nn","mutate_block_nn","mutate_brain_nn","mutate_nn","physical_world","rules","world","PhysiWorldPlugin","as_any","as_any_mut","as_bind_group_shader_type","borrow","borrow_mut","build","deref","deref_mut","downcast","drop","from","from_sample_","from_subset","init","into","into_any","into_any_arc","into_any_rc","is_in_subset","to_sample_","to_subset","to_subset_unchecked","try_from","try_into","type_id","upcast","vzip","setup_gravity","viscosity","Wall","as_any","as_any_mut","as_bind_group_shader_type","borrow","borrow_mut","component_ids","deref","deref_mut","downcast","drop","from","from_components","from_sample_","from_subset","get_components","init","into","into_any","into_any_arc","into_any_rc","is_in_subset","setup_walls","to_sample_","to_subset","to_subset_unchecked","try_from","try_into","type_id","upcast","vzip"],"q":[[0,"evosim"],[14,"evosim::blob"],[18,"evosim::blob::blob"],[129,"evosim::blob::blob_builder"],[243,"evosim::blob::block"],[518,"evosim::blob::geno_blob_builder"],[741,"evosim::brain"],[745,"evosim::brain::neuron"],[946,"evosim::brain::nn"],[1068,"evosim::brain::resource"],[1107,"evosim::brain::signal"],[1339,"evosim::componet"],[1411,"evosim::consts"],[1464,"evosim::consts::mutate_consts"],[1476,"evosim::contorl"],[1480,"evosim::contorl::contorl"],[1513,"evosim::contorl::resource"],[1606,"evosim::contorl::train_move"],[1614,"evosim::contorl::update"],[1624,"evosim::graphics"],[1686,"evosim::io"],[1689,"evosim::io::evoio"],[1717,"evosim::io::export"],[1831,"evosim::io::import"],[1841,"evosim::logger"],[1842,"evosim::mutate"],[1845,"evosim::mutate::geno_mutate"],[1855,"evosim::mutate::mutate"],[1886,"evosim::mutate::nn_mutate"],[1890,"evosim::physics"],[1893,"evosim::physics::physical_world"],[1921,"evosim::physics::rules"],[1923,"evosim::physics::world"]],"d":["basic implementation of blob (an individual virtual …","all implementation about neural networks","Some bevy componets don’t belongs to any module","all the consts","update simulation once each frame, entrance of the entire …","Graphics, Diagnostics, Framerates, Cameras","Import and Export the simulation, generate checkpoints","logger script,  provide macros to log informations …","","","","Main function to start the simulation (which is a bevy app)","all implementations relate to mutation","implementations about physical world","<code>BlobInfo</code> componet and <code>BlobBundle</code>","blob_builder, build a blob and gengrate corresponding …","block, the smallest rigid body unit in the project, used …","implementation of blob’s gene and builder that can build …","flag of a blob entity","also contains blobgeno, but been added in …","informations about the blob.","Add geometric infomation of new blocks in blob, update …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","cumulated moving distance, base on <code>mass_center</code>","","","","","","","","","","","","","","","","","","","","","","","","velocity is base on <code>mass_center</code>","","","","","","","Blob unit for builder to use","BlobBuilder, takes ownership fo commands and mut reference …","","","","","","","","","","","","","","","","","","","","","","","","","","","add a new block to the bottom of the current block and …","add a new block to the left of the current block and move …","add a new block to the right of the current block and move …","add a new block to the top of the current block and move …","","","","","","","","helper function.","","","","","","","move one step down from the current position","","Clean all the things inside BlobBuilder","","create the first block and return the nn_id of it","current position index in block vector","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","BlobBuilder taks ownership of Commands, which means you …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","move one step left from the current position","","","","reset the current position to the first block","move one step right from the current position","","set color for blob","","","","","","","","move one step up from the current position","","","","","","","","","","","send geno to blob so geno can be kept","update info inside the blob_bundle","","","","Anchor points that other joints can connect to.","BlockDepth is a u32 which represent the depth of the block …","","JointInfor for joint sensors","id for relate Neuron","ParentAnchor can only be 0(up), 1(down), 2(left), 3(right)","PhysiBlockBundle is the smallest unit in this simulation. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","neuron id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The Geno for morphyology of the blob.","","GenericGenoNode is the Node in the BlobGeno QuadTree.","Generate Blob according to Genotype Wrapper around …","minium signle geno node","parent indicator","QuadTree, Helper struct","","","get mut reference for all nn_id in the geno","get reference for all nn_id, in usize rather than …","","","","","","","","","","","","","","","","assign an nn_id to root (sometimes builder don’t need …","","","","","","","","","","","all nodes have at least one <code>none</code> child, using for mutate …","recursive function","generate blob according to its genotype","","build node that inherit <code>NeuronId</code> from geno","","","","recursively add to <code>occupied_region</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree structure debug info","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","get the first GenoNode","input the forward direction. output the left and right …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","checker function to check the genotype is valid or not.","","","all nodes don’t have child, used for mutate to lose limb","","only used for morphyology mutation, update the <code>center</code> in …","push all subtrees outside if the root block’s size …","","generate a random GenoType that don’t have conflict limbs","","","","","function to acquire a new rand node","","","","","","all the not-None indices of the subtree","generate <code>PhysiBlockBundle</code> from GenoNode","","","","","","","","","","","","","","","","","","","","Calculates the Tree Edit Distance (TED) between two …","","","","","","","","","","","","","","","","","","","","","","","","","","","implementation of two neuron type: brain neuron and block …","base neuron implementation","implementation about <code>BevyBlockNeurons</code>, which is a wrapper …","signals that passes between neurons","","","neuron for blocks.","NN for centeral brain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","output inward signal that passing to next layer Takes …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","forward function for inward nn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bevy resource, which make sure the neurons can be accessed …","","","","","","","run brain_nn and start outward pass","pass the signal from last inward layer to brain","drop all the values inside","","","","","","","Returns the argument unchanged.","","","","start neuron computing and return outputs","","","Calls <code>U::from(self)</code>.","","","","Pass the signal from the leaf to the root layer by layer","","","","","","","","","","","","Input signal of center block, which do not have parent and …","","","","Input singal for single inward <code>BlockNeuron</code>","","Input singal for single outward <code>BlockNeuron</code>","<code>SignalHandler</code> handles input signal from bevy","anchor point to parent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Input singal from children neurons.","input singal from children neurons. Shape is (4,CL)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bond the entity","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","stratify signals base on depth.","","","inherit processed signal from inward signal","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Input singal from parent neurons. Array length in constant","","","","","push inward signals and ids to handler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","denote which blob it belongs to. The u32 value is the idx …","Every collider should have a type flag. Then the sensor …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","activation function","","min distance between two spawn point","brain nn shape","","","","","","","","","","","","tournament selection hybrid","each children has 4 input values during inward pass","currently it has 3 layers, the hidden layer has 8 nodes","how long a signle iteration, counted in frame","","","","","","","","min time cost each frame to be print","","","","","","each parent passes 4 value to children in outward pass","outward nn shape","","population for each training iteration","","","","","","","","","limit for population generation area","thread count","choose between swim and walk","survival rate in <code>train_move.rs</code>","","","","","","probablity of having limb size mutate","max times to retry to add a new limb if last one cause …","probablity for the choosen node to gain a child node, …","","","porbablity of a signle joint limit to mutate","porbablity of a single nn to mutate","standard deviation for normal distribution mutation","clamp between this scaler for <code>DEFAULT_BLOCK_SIZE</code>","probablity for each signle block to mutate","scaler for block mutation","probablity of having tree structure mutate","This module is the entrance of all updates and neuron …","hepler bevy resources to pass information and signals …","training process. Trainnig to let blobs to learn to move …","all implementation of framely updates relate to blobs …","Main entrance of the whole EvoSim system","","","","","","","inital setup for demo (mainly for mutation demo)","","","","","educlidean distance between two points","","Returns the argument unchanged.","","","generate a random blob center pos base on target population","","Calls <code>U::from(self)</code>.","","","","","inital setup for movement training","","","","","","","","","count how many frames been passed since simulation start","The Tree Edit Distance, used as indicator for diversity","A temp storage for all blob and it’s relate neuron’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","delete neuron from nnvec based on outcasts.","determine the final surviers by random select blobs from …","determin if iteration ends","logger function for swim training","logger function for walk training","reproduce the blob to the target population","main training function for blob’s swim moving.","main training function for blob’s walk moving.","<strong>CORE FUNCTION</strong>","get contact force event for an entity, return the first if …","Not a bevy system.","Calculates the mass center of a collection of points.","Calculates the relative angular velocity between two …","Calculates the relative rotation between two transforms.","<strong>a bevy function</strong>","update TED resource","update iteration resource","Update <code>JointInfo</code> componet each frame.","","all implementations relate to graphics","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","spawn camera","","","","","","","This system toggles the vsync mode when pressing the …","","","","","","","","","","","implementation of <code>EvoIOPlugin</code>","Serialize and export the simulation stage","Import and deserialize the checkpoint or exported files","all implementations relate to import and export (save and …","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","struct for file to save &amp; load","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Flattening and sorting by usize index, return cloned nnvec","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","nested vec, outer relate to blob, inner relate to block …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","despawn all the entities relate to blob","load blobs from an exported file or checkpoints file","take folder path as input, return fname","ignore and overwrite all blobs and NNs that exist","","implementation of geno (morphyologt) mutation","Implementation of <code>MutatePlugin</code>","implementations about neural networks’s mutation (weight …","","gain a new limb as the child of the index node return type …","if a block has its size changed, all its subnode will have …","the blob lose a block at index <code>idx</code>, and all its subnodes. …","mutate size of blocks for a blob","loop over all blobs to mutate geno. mutate tree-structure, …","Mutate joint limit of limbs","mutate the size of a single block to the new size provided","gain or lose limbs for a blob","generate a new random <code>GenericGenoNode</code>，","all implementations relate to mutation","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","similar implementation as <code>clean()</code> in <code>import.rs</code> respawn …","mutate all blobs in both geno and nn, refresh the field, …","mutated blob may gain or lose NN, sync it with resource.","","","","","","","","","add an random value to the existed weight and bias","","","mutate Neuron Networks","implementation of <code>PhysiWorldPlugin</code>","additional physical rules applied","construct the virtual world","all implementations relate to physic and the world.","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Create drag force for under-water simulation Cost about 5% …","wall flag, different from <code>ColliderFlag</code>","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,95,1,12,95,1,12,95,1,12,12,95,1,12,95,1,12,1,1,1,1,1,95,1,12,1,1,12,95,1,12,95,1,12,95,1,12,95,1,12,1,95,1,12,95,1,95,1,12,95,1,12,1,12,95,1,12,95,1,1,12,95,1,12,95,1,12,95,1,12,95,1,12,95,1,12,1,1,1,95,1,12,95,1,12,95,1,12,12,95,1,12,95,1,12,95,1,12,95,1,12,1,12,95,1,12,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,23,23,23,30,23,30,23,30,23,30,0,23,23,23,30,23,30,23,30,23,23,23,23,30,23,30,23,30,23,30,23,30,30,23,30,23,23,30,23,30,30,23,23,30,23,30,23,30,23,30,23,30,23,30,23,30,30,23,23,23,30,23,30,23,30,23,30,23,30,23,30,30,23,30,23,30,23,30,23,30,23,23,30,23,30,0,0,0,0,0,0,0,29,39,39,83,35,36,37,38,39,29,83,35,36,37,38,39,29,83,35,36,37,38,39,29,83,35,36,37,38,39,29,83,35,36,37,38,39,29,35,35,36,37,38,39,29,35,36,37,38,39,29,35,36,37,38,39,29,29,83,35,36,37,38,39,29,38,29,29,83,35,36,37,38,39,29,83,35,36,37,38,39,29,83,35,36,37,38,39,29,83,35,36,37,38,39,29,29,29,29,35,36,37,38,29,83,35,36,37,38,39,29,83,35,36,37,38,39,83,35,36,37,38,39,29,83,35,36,37,38,39,29,38,29,35,29,83,35,36,37,38,39,38,83,35,36,37,38,39,29,83,35,36,37,38,39,29,83,35,36,37,38,39,29,83,35,36,37,38,39,29,83,35,36,37,38,39,29,83,35,36,37,38,39,29,29,35,29,29,38,29,38,29,29,35,29,29,35,36,37,38,39,29,83,35,36,37,38,39,29,83,35,36,37,38,39,29,83,35,36,37,38,39,29,35,83,35,36,37,38,39,29,83,35,36,37,38,39,29,29,83,35,36,37,38,39,29,83,35,36,37,38,39,29,39,29,83,35,36,37,38,39,29,29,29,29,29,29,29,0,42,0,0,0,42,0,41,34,34,34,43,34,42,44,41,43,34,42,44,41,43,34,42,44,41,34,43,34,42,44,41,43,34,42,44,41,41,0,43,0,0,43,44,34,0,41,41,41,41,34,42,44,41,34,42,44,41,34,42,44,41,0,34,34,44,41,43,34,42,44,41,43,34,42,44,41,34,42,44,41,43,34,42,44,41,43,34,42,44,41,34,42,44,41,34,42,44,41,43,34,42,44,41,43,34,44,43,34,42,44,41,43,34,42,44,41,34,44,34,34,0,43,34,42,44,41,43,34,42,44,41,43,34,42,44,41,43,34,42,44,41,43,34,42,44,41,41,43,34,42,44,41,41,0,0,34,44,0,34,41,34,34,41,34,44,41,41,0,0,34,42,44,41,44,41,44,34,42,44,41,43,34,42,44,41,43,34,42,44,41,43,34,42,44,41,41,43,34,42,44,41,43,34,42,44,41,43,34,42,44,41,43,34,42,44,41,34,43,34,42,44,41,0,0,0,0,31,31,0,0,0,0,0,0,0,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,58,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,55,56,57,58,57,57,58,57,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,57,57,31,55,56,57,58,55,56,58,57,57,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,31,55,56,57,58,0,0,0,63,63,65,63,63,64,65,63,64,65,63,64,65,64,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,64,65,65,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,65,64,65,64,65,63,64,65,63,64,65,63,64,65,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,63,64,65,64,0,0,68,68,68,68,68,0,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,68,68,0,68,68,68,68,68,68,68,68,0,0,0,0,0,0,0,0,67,69,67,61,66,70,59,69,67,61,66,70,59,69,67,61,66,70,59,59,59,69,67,61,66,70,59,69,67,61,66,70,59,69,69,61,59,70,70,70,61,59,61,59,61,59,61,59,61,61,69,61,70,59,67,69,67,61,66,70,59,69,67,61,66,70,59,70,69,67,61,66,70,59,69,67,61,66,70,59,67,70,67,67,66,66,70,59,69,67,61,66,70,59,69,67,61,66,70,59,69,67,61,66,70,59,69,61,70,59,69,67,66,70,70,69,67,61,66,70,59,69,67,61,66,70,59,69,67,61,66,70,59,69,67,61,66,70,59,69,67,61,66,70,59,69,69,69,67,61,66,70,59,61,61,67,66,70,67,69,61,59,69,70,67,66,61,70,59,70,69,67,61,66,70,59,67,66,69,67,61,66,70,59,69,67,61,66,70,59,69,67,61,66,70,59,69,67,61,66,70,59,69,67,61,66,70,59,69,67,61,66,70,59,69,67,61,66,70,59,59,61,59,61,71,0,0,71,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,73,73,73,73,73,0,73,73,73,73,0,73,73,73,73,0,73,73,73,73,73,73,0,73,73,73,73,73,73,73,73,0,0,0,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,78,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,78,76,77,78,78,78,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,100,89,100,89,100,89,100,89,100,89,100,89,100,89,100,89,100,89,100,89,100,100,89,100,89,100,100,89,100,89,100,89,100,89,100,89,100,89,100,0,89,100,89,100,89,100,0,89,100,89,100,89,100,89,100,89,100,0,0,0,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,0,0,0,0,0,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,92,0,0,93,94,92,93,94,92,92,93,94,92,93,94,92,92,0,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,0,93,94,92,92,92,92,93,94,92,93,94,93,94,92,93,94,92,92,92,92,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,0,0,97,97,97,97,97,97,97,97,0,0,0,0,0,0,0,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,0,0,0,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,0,101,101,101,101,101,101,101,101],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,[[1,2,2]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[[]],[[],[[8,[6,7]]]],0,[[9,10,11]],[[9,10,11]],0,0,[[],1],[[],12],[13],[13],[13],[13],[13],[13],[[]],[[]],[[]],[13],[13],[13],[[1,14],15],[[]],[[]],[[]],[11],[11],[[]],[[]],[[]],[[]],[[]],[[]],[16],[16],[11],[11],0,[[],13],[[],13],[[1,2,2]],[[],13],[[]],[[]],[[]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[[],19],[[],19],[[],19],0,0,[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[]],[[]],[[]],0,[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],20],[[],20],[[],20],0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[23,24,24,[20,[24]],20,25],[[20,[13]]]],[[23,24,24,[20,[24]],20,25],[[20,[13]]]],[[23,24,24,[20,[24]],20,25],[[20,[13]]]],[[23,24,24,[20,[24]],20,25],[[20,[13]]]],0,[[],3],[[],3],[[],3],[[],3],[[[5,[4]]]],[[[5,[4]]]],[[26,27,27,28]],0,0,[[]],[[]],[[]],[[]],[23,23],0,[23,23],0,[[23,29,25],[[20,[13]]]],0,0,[13],[13],[13],[13],[[]],[[]],[13],[13],[[30,14],15],[[]],[[]],[[26,[32,[31]]],23],[[]],[[]],[[]],[[]],0,0,[[],13],[[],13],[[]],[[]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[[],19],[[],19],[23,23],0,0,0,[23,23],[23,23],0,[[23,33],23],0,[[]],[[]],[[],20],[[],20],[[]],[[]],[23,23],0,0,[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],20],[[],20],[[23,34]],[23],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[35,35],[36,36],[37,37],[38,38],[39,39],[29,29],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],0,[[9,10,11]],[[9,10,11]],[[9,10,11]],[[9,10,11]],[[9,10,11]],[[9,10,11]],0,[[],38],[[],29],0,[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13],[13],[13],[13],[13],[13],[13],0,0,0,[[35,14],15],[[36,14],15],[[37,14],15],[[38,14],15],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11],[11],[11],[11],[11],[11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16],[16],[[24,24],35],[[24,24,24,24],29],[11],[11],[11],[11],[11],[11],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,[[13,[20,[13]]],38],0,0,0,0,0,[[29,33]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],0,[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[39,24,24]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[29,40],29],[[29,33],29],[[29,24],29],[[29,40],29],[[29,13,[20,[13]]],29],[[29,13],29],0,0,0,0,0,0,0,[[41,13,13,41,[32,[[32,[[20,[13]]]]]]],13],[34,[[32,[13]]]],[34,[[32,[[20,[13]]]]]],[34,[[32,[13]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[34,13]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41,[[32,[13]]]],[[[41,[42]],13,32]],[[43,34]],[[23,[41,[42]],13]],[[23,[41,[42]],13,13]],0,0,[[34,13]],[[[41,[42]],32,13],19],[[41,13],[[20,[13]]]],[[41,13]],[[41,13]],[[41,13]],[34,34],[42,42],[44,44],[[[41,[45]]],[[41,[45]]]],[[]],[[]],[[]],[[]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],[[41,13,[32,[13]]]],[[9,10,11]],[[],34],[[],44],[[41,13],40],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[46,[[21,[34]]]],[46,[[21,[42]]]],[46,[[21,[44]]]],[46,[[21,[[41,[47]]]]]],[[]],[[]],[[]],[[]],[[]],[13],[13],[13],[13],[13],[48,[[21,[49,50]]]],[48,[[21,[49,50]]]],[48,[[21,[49,50]]]],[48,[[21,[49,50]]]],[[34,14],15],[[42,14],15],[[44,14],15],[[[41,[51]],14],15],[[]],[[]],[[]],[[]],[[]],[[26,[32,[31]]],43],[11],[13,44],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16],[16],[11],[34,[[20,[44]]]],[13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[[41,13],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[41,13],19],[32,19],[32,19],[34,19],0,[[[20,[42]]],[[20,[44]]]],[34,[[32,[13]]]],0,[[34,13]],[34],[40,41],[[],34],0,0,[[41,13],[[20,[13]]]],[[[41,[51]],13,52,14],15],[[44,13,32],[[20,[42]]]],[[34,53],21],[[42,53],21],[[44,53],21],[[[41,[54]],53],21],0,[[41,13],[[32,[13]]]],[44,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[41,41],13],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[],22],[[],20],[[],20],[[],20],[[],20],[[],20],0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,31],[55,55],[56,56],[57,57],[58,58],[[]],[[]],[[]],[[]],[[]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],[[],55],[[],56],[[],57],[[],58],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[46,[[21,[31]]]],[46,[[21,[55]]]],[46,[[21,[56]]]],[46,[[21,[57]]]],[46,[[21,[58]]]],[[]],[[]],[[]],[[]],[[]],[13],[13],[13],[13],[13],[48,[[21,[49,50]]]],[48,[[21,[49,50]]]],[48,[[21,[49,50]]]],[48,[[21,[49,50]]]],[48,[[21,[49,50]]]],[[31,14],15],[[55,14],15],[[56,14],15],[[57,14],15],[[58,14],15],[[58,14],15],[[58,59],[[60,[24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16],[16],[16],[16],[[57,61],[[60,[24]]]],[[57,[60,[24]]],[[60,[24]]]],[58,[[60,[24]]]],[57,[[60,[24]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[[57,61],[[60,[24]]]],0,[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,[[31,53],21],[[55,53],21],[[56,53],21],[[57,53],21],[[58,53],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],62],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[],22],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[63,24],24],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[63,63],[64,64],[65,65],[[]],[[]],[[]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],[13],[13],[13],[13],[13],[13],[46,[[21,[63]]]],[46,[[21,[64]]]],[46,[[21,[65]]]],[[]],[[]],[[]],[13],[13],[13],[48,[[21,[49,50]]]],[48,[[21,[49,50]]]],[48,[[21,[49,50]]]],[[63,14],15],[[64,14],15],[[64,14],15],[[65,14],15],[[65,14],15],[[64,[60,[24]],63],[[60,[24]]]],[[65,[60,[24]]],[[60,[24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[[],19],[[],19],[[],19],0,[[13,13],64],[[[32,[13]],63],65],[[13,13],64],[[[32,[13]],63],65],[[63,53],21],[[64,53],21],[[65,53],21],[[]],[[]],[[]],[[]],[[]],[[]],[[],62],[[],62],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],20],[[],20],[[],20],[[]],[[]],[[]],0,0,0,[[],3],[[],3],[[[5,[4]]]],[[]],[[]],[[[32,[66]],[32,[31]],[32,[[60,[24]]]]]],[[[32,[66]],[32,[67]],[32,[31]]]],[68],[[],68],[13],[13],[[]],[13],[[68,14],15],[[]],[[]],[[]],[16],[[68,69],32],[[68,69],32],[[],13],[[]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[[[32,[[32,[67]]]],[32,[31]],13]],[[],19],0,[[[32,[[32,[67]]]],[32,[31]],13,32,[32,[[60,[24]]]]]],[[]],[[],20],[[]],[[],21],[[],21],[[],22],[[],20],[[]],0,0,0,0,0,0,0,0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[69,13],0,0,0,[70,70],[[]],[[],[[8,[6,7]]]],0,0,0,0,0,0,0,0,0,0,[[],69],[[],61],[[],70],[[],59],0,[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[46,[[21,[70]]]],[[]],[[]],[[]],[[]],[[]],[[]],[13],[13],[13],[13],[13],[13],0,[48,[[21,[49,50]]]],[[67,14],15],[[67,14],15],[[66,14],15],[[66,14],15],[[70,14],15],[[59,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16],[16],[16],[16],[69],[67,61],[66,59],[[70,[60,[24]]]],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[69,13],0,[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,[[69,59,13]],[[61,[60,[24]],13]],[[59,[60,[24]],13]],[[69,61,13,13,36,37,27]],[[70,53],21],0,0,[61,[[60,[24]]]],[70,[[60,[24]]]],[59,[[60,[24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],62],[[],62],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[59,59],[[61,20],61],[[59,20],59],[61,61],0,0,0,0,[[],3],[[],3],[[],3],[[],3],[[[5,[4]]]],[[[5,[4]]]],[[]],[[]],[[]],[[]],[71,71],[72,72],[[]],[[]],[[],[[8,[6,7]]]],[[],[[8,[6,7]]]],[[9,10,11]],[[9,10,11]],[13],[13],[13],[13],[[]],[[]],[13],[13],[[71,14],15],[[72,14],15],[[]],[[]],[11],[11],[[]],[[]],[[]],[[]],[11],[11],[[],13],[[],13],[[]],[[]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[[],19],[[],19],[[]],[[]],[[]],[[]],[[],20],[[],20],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],20],[[],20],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],3],[[],3],[[[5,[4]]]],[[]],[[]],[[73,74]],[[26,[75,[68]]]],[13],[13],[[]],[13],[[],24],[[73,74]],[[]],[[]],[[]],[[],32],[[],13],[[]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[[],19],[[26,[75,[68]]]],[[]],[[],20],[[]],[[],21],[[],21],[[],22],[[],20],[[]],0,0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],76],[[],77],[[],78],[13],[13],[13],[13],[13],[13],[[]],[[]],[[]],[13],[13],[13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16],[16],[16],0,0,[[],13],[[],13],[[],13],[[]],[[]],[[]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[78,19],[[],19],[[],19],[[],19],0,[78],[[78,[32,[34]],[32,[1]],[32,[31]]]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[79,[32,[31]]]],[32],[[[80,[76]]],19],[[[80,[76]],[79,[1]],[80,[77]]]],[[[80,[76]],[79,[1]],[80,[77]]]],[[[32,[34]],[32,[1]],[32,[31]]]],[[79,79,[75,[68]],[75,[78]],[80,[[82,[81]]]],[80,[76]]]],[[79,79,[75,[68]],[75,[78]],[80,[[82,[81]]]],[80,[76]]]],[[[79,[[84,[83]]]],79,[79,[38]],[75,[68]],[86,[85]],[79,[71]],[79,[39]],[79,[36]],[79,[1]],[79,[37]]]],[[27,[32,[85]]],[[20,[85]]]],[[27,[32,[85]],[79,[71]]],20],[32,20],[[87,87],24],[[88,88],24],[[79,79,[80,[76]]]],[[79,[75,[77]]]],[[[75,[76]]]],[[79,[79,[39]],[79,[88]],[79,[87]]]],0,0,0,0,[[],3],[[],3],[[],3],[[],3],[[[5,[4]]]],[[[5,[4]]]],[[]],[[]],[[]],[[]],[[89,74]],[[9,10,11]],[13],[13],[13],[13],[[]],[[]],[13],[13],[[]],[[]],[11],[[]],[[]],[[]],[[]],[11],[[],13],[[],13],[[]],[[]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[[],19],[[],19],[26],[[]],[[]],[[],20],[[],20],[[]],[[]],[[[80,[[82,[81]]]],[79,[90]]]],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],20],[[],20],[[]],[[]],0,0,0,0,[[],3],[[],3],[[[5,[4]]]],[[]],[[]],[[91,74]],[13],[13],[[]],[13],[[]],[[]],[[]],[[],13],[[]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[[],19],[[]],[[],20],[[]],[[],21],[[],21],[[],22],[[],20],[[]],0,0,0,0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[92],[[]],[[],62],[13],[13],[13],[13],[13],[13],[46,[[21,[92]]]],[[]],[[]],[[]],[13],[13],[13],[48,[[21,[49,50]]]],[[[80,[[82,[81]]]],79,79,[80,[68]],[80,[76]]]],[92,[[32,[31]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],13],[[],13],[[],13],[[]],[[]],[[]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[18,[[18,[3]]]],[[]],[[]],[[[80,[76]]],19],[[],19],[[],19],[[],19],[92,93],[92,94],[92,13],[[]],[[]],[[],92],[93,20],[94,20],0,0,0,0,0,0,[92],[[92,32]],[92],[[92,53],21],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],20],[[],20],[[],20],[[]],[[]],[[]],0,0,0,0,0,0,[[26,[75,[68]],[79,[27,[84,[95]]]],[79,[27]],[79,[27,[84,[96]]]],[80,[[82,[81]]]]]],[[26,[75,[68]],[80,[[82,[81]]]]]],[52,[[20,[62]]]],[[92,26,68]],[[52,52]],0,0,0,0,[[34,13],19],[13,20],[[34,13]],[34],[[[32,[34]]]],[34],[[34,13]],[34],[[44,13],42],0,[[],3],[[],3],[[[5,[4]]]],[[]],[[]],[[97,74]],[13],[13],[[]],[13],[[]],[[]],[[]],[[],13],[[]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[[],19],[[26,[75,[68]],79,[79,[27,[84,[95]]]],[79,[27]],[79,[27,[84,[96]]]],[80,[[82,[81]]]]]],[[26,[75,[68]],[75,[78]],[79,[27,[84,[95]]]],[79,[27]],[79,[27,[84,[96]]]]]],[[[32,[34]],[75,[68]]]],[[]],[[],20],[[]],[[],21],[[],21],[[],22],[[],20],[[]],[65],[57],[58],[[[32,[31]]]],0,0,0,0,[[],3],[[],3],[[[5,[4]]]],[[]],[[]],[[98,74]],[13],[13],[[]],[13],[[]],[[]],[[]],[[],13],[[]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[[],19],[[]],[[],20],[[]],[[],21],[[],21],[[],22],[[],20],[[]],[[[75,[99]]]],[79],0,[[],3],[[],3],[[[5,[4]]]],[[]],[[]],[[9,10,11]],[13],[13],[[]],[13],[[]],[11],[[]],[[]],[11],[[],13],[[]],[[[8,[7]]],[[8,[3,7]]]],[17,[[17,[3]]]],[18,[[18,[3]]]],[[],19],[26],[[]],[[],20],[[]],[[],21],[[],21],[[],22],[[],20],[[]]],"c":[],"p":[[3,"BlobInfo"],[3,"Vec2"],[8,"Any"],[3,"Image"],[3,"RenderAssets"],[8,"TypeData"],[3,"Global"],[3,"Box"],[3,"Components"],[3,"Storages"],[8,"FnMut"],[3,"BlobBundle"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"World"],[3,"Arc"],[3,"Rc"],[15,"bool"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"BlobBuilder"],[15,"f32"],[8,"Bundle"],[3,"Commands"],[3,"Entity"],[3,"RevoluteJointBuilder"],[3,"PhysiBlockBundle"],[3,"BlobBlock"],[4,"GenericNN"],[3,"Vec"],[4,"Color"],[3,"BlobGeno"],[3,"BlockAnchors"],[3,"BlockDepth"],[3,"ParentAnchor"],[3,"NeuronId"],[3,"JointInfo"],[15,"u32"],[3,"QuadTree"],[4,"GenericGenoNode"],[3,"GenoBlobBuilder"],[3,"GenoNode"],[8,"Clone"],[8,"Deserializer"],[8,"Deserialize"],[8,"Serializer"],[3,"Ok"],[3,"Error"],[8,"Debug"],[15,"str"],[8,"Serializer"],[8,"Serialize"],[3,"InwardNN"],[3,"OutwardNN"],[3,"BlockNN"],[3,"BrainNN"],[3,"BrainSignal"],[6,"Array1"],[3,"InwardNNInputSignal"],[3,"String"],[4,"Activation"],[3,"BaseLayer"],[3,"BaseNN"],[3,"BrainSignalUnit"],[3,"InwardNNInputSignalUnit"],[3,"BevyBlockNeurons"],[3,"SignalHandler"],[3,"OutwardNNInputSignal"],[4,"ColliderFlag"],[3,"BlobEntityIndex"],[3,"BlobContorlPlugin"],[3,"App"],[3,"ResMut"],[3,"Frames"],[3,"TED"],[3,"TrainMutPipe"],[3,"Query"],[3,"Res"],[4,"KeyCode"],[3,"Input"],[3,"CenterBlockFlag"],[3,"With"],[3,"ContactForceEvent"],[3,"EventReader"],[3,"Velocity"],[3,"Transform"],[3,"EvoGraphicsPlugin"],[3,"Window"],[3,"EvoIOPlugin"],[3,"ExportFile"],[3,"ExportFileIter"],[3,"ExportFileIterMut"],[3,"Blob"],[3,"ImpulseJoint"],[3,"MutatePlugin"],[3,"PhysiWorldPlugin"],[3,"RapierConfiguration"],[3,"MainCamera"],[3,"Wall"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
